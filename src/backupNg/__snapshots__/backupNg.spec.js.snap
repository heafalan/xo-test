// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`backupNg .createJob() : creates a new backup job with schedules 1`] = `
Object {
  "id": Any<String>,
  "mode": "full",
  "name": "default-backupNg",
  "settings": Any<Object>,
  "type": "backup",
  "userId": Any<String>,
  "vms": Object {
    "id": "0342407f-9727-4f12-83c2-9d0c458916c2",
  },
}
`;

exports[`backupNg .createJob() : creates a new backup job with schedules 2`] = `
Object {
  "cron": "0 * * * * *",
  "enabled": false,
  "id": Any<String>,
  "jobId": Any<String>,
  "name": "scheduleTest",
}
`;

exports[`backupNg .createJob() : creates a new backup job without schedules 1`] = `
Object {
  "id": Any<String>,
  "mode": "full",
  "name": "default-backupNg",
  "settings": Object {
    "": Object {
      "reportWhen": "never",
    },
  },
  "type": "backup",
  "userId": Any<String>,
  "vms": Object {
    "id": "0342407f-9727-4f12-83c2-9d0c458916c2",
  },
}
`;

exports[`backupNg .runJob() : fails trying to run a backup job with a VM without disks 1`] = `
Object {
  "data": Object {
    "mode": "full",
    "reportWhen": "never",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "jobId": Any<String>,
  "jobName": "default-backupNg",
  "message": "backup",
  "scheduleId": Any<String>,
  "start": Any<Number>,
  "status": "skipped",
}
`;

exports[`backupNg .runJob() : fails trying to run a backup job with a VM without disks 2`] = `
Object {
  "data": Object {
    "id": Any<String>,
    "type": "VM",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "message": Any<String>,
  "result": Object {
    "message": "no disks found",
    "name": "Error",
    "stack": Any<String>,
  },
  "start": Any<Number>,
  "status": "skipped",
}
`;

exports[`backupNg .runJob() : fails trying to run a backup job with no matching VMs 1`] = `[JsonRpcError: unknown error from the peer]`;

exports[`backupNg .runJob() : fails trying to run a backup job with non-existent vm 1`] = `
Array [
  Object {
    "data": Object {
      "vms": Array [
        "non-existent-id",
      ],
    },
    "message": "missingVms",
  },
]
`;

exports[`backupNg .runJob() : fails trying to run a backup job without schedule 1`] = `[JsonRpcError: invalid parameters]`;

exports[`backupNg .runJob() : fails trying to run backup job with remotes without exportRetention 1`] = `
Object {
  "data": Object {
    "mode": "full",
    "reportWhen": "never",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "jobId": Any<String>,
  "jobName": "default-backupNg",
  "message": "backup",
  "scheduleId": Any<String>,
  "start": Any<Number>,
  "status": "failure",
}
`;

exports[`backupNg .runJob() : fails trying to run backup job with remotes without exportRetention 2`] = `
Object {
  "data": Object {
    "id": Any<String>,
    "type": "VM",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "message": Any<String>,
  "result": Object {
    "message": "copy, export and snapshot retentions cannot both be 0",
    "name": "Error",
    "stack": Any<String>,
  },
  "start": Any<Number>,
  "status": "failure",
}
`;

exports[`backupNg execute three times a rolling snapshot with 2 as retention & revert to an old state 1`] = `
Object {
  "data": Object {
    "mode": "full",
    "reportWhen": "never",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "jobId": Any<String>,
  "jobName": "default-backupNg",
  "message": "backup",
  "scheduleId": Any<String>,
  "start": Any<Number>,
  "status": "success",
}
`;

exports[`backupNg execute three times a rolling snapshot with 2 as retention & revert to an old state 2`] = `
Object {
  "end": Any<Number>,
  "id": Any<String>,
  "message": "snapshot",
  "result": Any<String>,
  "start": Any<Number>,
  "status": "success",
}
`;

exports[`backupNg execute three times a rolling snapshot with 2 as retention & revert to an old state 3`] = `
Object {
  "data": Object {
    "id": Any<String>,
    "type": "VM",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "message": Any<String>,
  "start": Any<Number>,
  "status": "success",
}
`;

exports[`backupNg execute three times a rolling snapshot, a delta backup and a CR, revert to an old state & restore the backups 1`] = `
Object {
  "data": Object {
    "mode": "delta",
    "reportWhen": "never",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "jobId": Any<String>,
  "jobName": "default-backupNg",
  "message": "backup",
  "scheduleId": Any<String>,
  "start": Any<Number>,
  "status": "success",
}
`;

exports[`backupNg execute three times a rolling snapshot, a delta backup and a CR, revert to an old state & restore the backups 2`] = `
Object {
  "end": Any<Number>,
  "id": Any<String>,
  "message": "snapshot",
  "result": Any<String>,
  "start": Any<Number>,
  "status": "success",
}
`;

exports[`backupNg execute three times a rolling snapshot, a delta backup and a CR, revert to an old state & restore the backups 3`] = `
Object {
  "data": Object {
    "id": Any<String>,
    "type": "VM",
  },
  "end": Any<Number>,
  "id": Any<String>,
  "message": Any<String>,
  "start": Any<Number>,
  "status": "success",
}
`;

exports[`backupNg execute three times a rolling snapshot, a delta backup and a CR, revert to an old state & restore the backups 4`] = `
Array [
  "Continuous Replication",
]
`;

exports[`backupNg execute three times a rolling snapshot, a delta backup and a CR, revert to an old state & restore the backups 5`] = `[JsonRpcError: forbidden operation: Start]`;

exports[`backupNg execute three times a rolling snapshot, a delta backup and a CR, revert to an old state & restore the backups 6`] = `
Array [
  "Continuous Replication",
]
`;

exports[`backupNg execute three times a rolling snapshot, a delta backup and a CR, revert to an old state & restore the backups 7`] = `[JsonRpcError: forbidden operation: Start]`;
